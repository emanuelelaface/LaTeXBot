import os
fpid = os.fork()
if fpid != 0:
    quit()


import telegram
from telegram.ext import Updater, CommandHandler, RegexHandler, CallbackQueryHandler
from telegram import InlineKeyboardMarkup, InlineKeyboardButton
import requests
import re
from io import BytesIO
from cairosvg import svg2png
import urllib.parse
from PIL import Image
import numpy
from webptools import webplib as webp

telegram_token='' # Telegram Token From BotFather
updater = Updater(token=telegram_token, user_sig_handler=True)
dispatcher = updater.dispatcher

def latex_to_png(latex_text, sticker):
    to_zoom=False
    url_base = 'https://math.now.sh?from='
    latex_text = re.search(r'\$.*?\$', latex_text).group()[1:-1]
    latex_text = urllib.parse.quote(latex_text)
    response = requests.get(url_base+latex_text)
    if response.content.decode().find('error') == -1:
        output_img = BytesIO()
        svg2png(bytestring=response.content, write_to=output_img, dpi=1200)
        output_img.seek(0)
        _,_,_,a = Image.open(output_img).split()
        a=numpy.asarray(a)
        output_img.close()
        if sticker:
            if a.shape[0]>a.shape[1]:
                a=numpy.append(a,numpy.zeros((a.shape[0],a.shape[1]//3), dtype=numpy.uint8),axis=1)
            else:
                ratio = int(a.shape[1]/a.shape[0]/4)
                if a.shape[0]*ratio > 1024:
                    ratio=int(1024/a.shape[0])
                a=numpy.append(a,numpy.zeros((a.shape[0]*ratio,a.shape[1]), dtype=numpy.uint8),axis=0)
            r=255-(a//2)
            g=255-(a//2)
            b=255-(a//2)
        else:
            r=255-a
            g=255-a
            b=255-a
        out_file = '/run/user/1768603665/latex-img_'+str(numpy.random.randint(1e8))
        final_png = Image.fromarray(numpy.dstack((r,g,b,a)))
        final_png.thumbnail((2048,2048), Image.ANTIALIAS)
        final_png.save(out_file+'.png')
        final_png.close()
        if a.shape[0] > 2048 or a.shape[1] > 2048:
            to_zoom=True
        return out_file, to_zoom
    else:
        return False, False

def latex_sender(bot, update):
    chat_id = update['message']['chat']['id']
    message_id = update['message']['message_id']
    latex_text = update['message']['text']
    out_file, to_zoom = latex_to_png(latex_text, True)
    if out_file:
        try:
            bot.delete_message(chat_id=chat_id, message_id=message_id)
        except:
            None
        webp.cwebp(out_file+'.png', out_file+'.webp', "-q 100")
        if to_zoom:
            menuKeyboard=InlineKeyboardMarkup([[InlineKeyboardButton("Zoom Image", callback_data=latex_text)]])
            bot.sendSticker(chat_id=chat_id, sticker=open(out_file+'.webp','rb'), reply_markup=menuKeyboard)
        else:
            bot.sendSticker(chat_id=chat_id, sticker=open(out_file+'.webp','rb'))
        os.remove(out_file+'.png')
        os.remove(out_file+'.webp')
    else:
        bot.sendMessage(chat_id=chat_id, text='Invalid LaTeX Syntax')

def png_sender(bot, update):
    query = update.callback_query
    chat_id = query.message.chat_id
    latex_text = query.data
    out_file, to_zoom = latex_to_png(latex_text, False)
    if out_file:
        bot.sendPhoto(chat_id=chat_id, photo=open(out_file+'.png','rb'))
        os.remove(out_file+'.png')
    else:
        bot.sendMessage(chat_id=chat_id, text='Invalid LaTeX Syntax')

dispatcher.add_handler(RegexHandler('\$(.*?)\$', latex_sender))
dispatcher.add_handler(CallbackQueryHandler(png_sender))
updater.start_polling()
